<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hrms.mapper.EmployeeMapper">
  <resultMap id="BaseResultMap" type="com.hrms.bean.Employee">
    <id column="EMP_ID" jdbcType="DECIMAL" property="empId" />
    <result column="EMP_NAME" jdbcType="VARCHAR" property="empName" />
    <result column="EMAIL" jdbcType="VARCHAR" property="email" />
    <result column="GENDER" jdbcType="CHAR" property="gender" />
    <result column="DEPT_ID" jdbcType="DECIMAL" property="deptId" />
  </resultMap>

  <resultMap id="WithDeptBaseResultMap" type="com.hrms.bean.Employee" extends="BaseResultMap">
<!--    <id column="EMP_ID" jdbcType="DECIMAL" property="empId" />-->
<!--    <result column="EMP_NAME" jdbcType="VARCHAR" property="empName" />-->
<!--    <result column="EMAIL" jdbcType="VARCHAR" property="email" />-->
<!--    <result column="GENDER" jdbcType="CHAR" property="gender" />-->
<!--    <result column="DEPT_ID" jdbcType="DECIMAL" property="deptId" />-->
    <!--   指定联合查询 查询部门-->
    <collection property="department" ofType="com.hrms.bean.Department" select="find_dept_id" column="dept_id">
      <id column="dept_id" property="deptId" />
      <result column="dept_name" property="deptName" />
<!--    JavaType和ofType都是用来指定对象类型的，但是JavaType是用来指定pojo中属性的类型，而ofType指定的是映射到list集合属性中pojo的类型。
        javaType用来指定对象所属的java数据类型，也就是private List<Post>posts 的ArrayList类型
        ofType用来指定对象的所属javaBean类,也就是尖括号的泛型private List<Post>posts-->
    </collection>
  </resultMap>

  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    E.EMP_ID, E.EMP_NAME, E.EMAIL, E.GENDER, E.DEPT_ID
  </sql>
  <sql id="WithDept_Column_List">
    E.EMP_ID, E.EMP_NAME, E.EMAIL, E.GENDER, E.DEPT_ID,D.DEPT_ID,D.DEPT_NAME
  </sql>

  <!--  查询员工是带部门信息-->
  <!--  Employee selectByPrimaryKeyWithDept(Long empId);-->
  <select id="selectByPrimaryKeyWithDept" resultMap="WithDeptBaseResultMap">
    select
    <include refid="WithDept_Column_List" />
    from TBL_EMP2 E INNER JOIN TBL_DEPT2 D
    ON E.DEPT_ID = D.DEPT_ID
    where EMP_ID = #{empId,jdbcType=DECIMAL}
  </select>
  <!--  List<Employee> selectByExampleWithDept(EmployeeExample example);-->
  <select id="selectByExampleWithDept" resultMap="WithDeptBaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="WithDept_Column_List" />
    from TBL_EMP2 E INNER JOIN TBL_DEPT2 D
    ON E.DEPT_ID = D.DEPT_ID
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>

  <!--  查询员工时不带部门信息-->
  <select id="selectByExample" parameterType="com.hrms.bean.EmployeeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from TBL_EMP2
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from TBL_EMP2 E
    where EMP_ID = #{empId,jdbcType=DECIMAL}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="Integer">
    delete from TBL_EMP2
    where EMP_ID = #{empId,jdbcType=DECIMAL}
  </delete>
  <delete id="deleteByExample" parameterType="com.hrms.bean.EmployeeExample">
    delete from TBL_EMP2
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>

  <!--  oracle自增-->
  <insert id="insert" parameterType="com.hrms.bean.Employee">
    <selectKey keyProperty="empId" order="BEFORE" resultType="Integer">
      select TBL_EMP2_ID.nextval FROM DUAL
    </selectKey>
    insert into TBL_EMP2 (EMP_ID, EMP_NAME, EMAIL,
    GENDER, DEPT_ID)
    values (#{empId,jdbcType=DECIMAL}, #{empName,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR},
    #{gender,jdbcType=CHAR}, #{deptId,jdbcType=DECIMAL})
  </insert>

  <!--  子查询-->
  <select id="find_dept_id" resultType="com.hrms.bean.Department" parameterType="Integer">
    select D.DEPT_ID,D.DEPT_NAME
    from TBL_DEPT2 D
    WHERE D.DEPT_ID=#{dept_id}
  </select>

  <!--  查询所有人信息-->
  <select id="getAll" resultMap="WithDeptBaseResultMap">
    select
    <include refid="Base_Column_List" />
    from TBL_EMP2 E
  </select>

<!--修改为oracle自增-->
  <insert id="insertSelective" parameterType="com.hrms.bean.Employee">
    <selectKey keyProperty="empId" order="BEFORE" resultType="Integer">
      select TBL_EMP2_ID.nextval FROM DUAL
    </selectKey>
    insert into TBL_EMP2
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="empId != null">
        EMP_ID,
      </if>
      <if test="empName != null">
        EMP_NAME,
      </if>
      <if test="email != null">
        EMAIL,
      </if>
      <if test="gender != null">
        GENDER,
      </if>
      <if test="deptId != null">
        DEPT_ID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="empId != null">
        #{empId,jdbcType=DECIMAL},
      </if>
      <if test="empName != null">
        #{empName,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=CHAR},
      </if>
      <if test="deptId != null">
        #{deptId,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>

  <select id="countByExample" parameterType="com.hrms.bean.EmployeeExample" resultType="java.lang.Long">
    select count(*) from TBL_EMP2
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update TBL_EMP2
    <set>
      <if test="record.empId != null">
        EMP_ID = #{record.empId,jdbcType=DECIMAL},
      </if>
      <if test="record.empName != null">
        EMP_NAME = #{record.empName,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        EMAIL = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.gender != null">
        GENDER = #{record.gender,jdbcType=CHAR},
      </if>
      <if test="record.deptId != null">
        DEPT_ID = #{record.deptId,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update TBL_EMP2
    set EMP_ID = #{record.empId,jdbcType=DECIMAL},
    EMP_NAME = #{record.empName,jdbcType=VARCHAR},
    EMAIL = #{record.email,jdbcType=VARCHAR},
    GENDER = #{record.gender,jdbcType=CHAR},
    DEPT_ID = #{record.deptId,jdbcType=DECIMAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hrms.bean.Employee">
    update TBL_EMP2
    <set>
      <if test="empName != null">
        EMP_NAME = #{empName,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        EMAIL = #{email,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        GENDER = #{gender,jdbcType=CHAR},
      </if>
      <if test="deptId != null">
        DEPT_ID = #{deptId,jdbcType=DECIMAL},
      </if>
    </set>
    where EMP_ID = #{empId,jdbcType=DECIMAL}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hrms.bean.Employee">
    update TBL_EMP2
    set EMP_NAME = #{empName,jdbcType=VARCHAR},
      EMAIL = #{email,jdbcType=VARCHAR},
      GENDER = #{gender,jdbcType=CHAR},
      DEPT_ID = #{deptId,jdbcType=DECIMAL}
    where EMP_ID = #{empId,jdbcType=DECIMAL}
  </update>
</mapper>