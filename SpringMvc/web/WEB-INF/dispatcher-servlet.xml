<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
">

    <!--开启扫描器 扫描有注解的包-->
    <context:component-scan base-package="handler,execption"></context:component-scan>

    <!--配置视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--增加后缀suffix 前缀prefix-->
        <property name="prefix" value="/views/" />
        <property name="suffix" value=".jsp" />
    </bean>

    <!--mvc标签 通过view直接访问  不经过Controller-->
    <mvc:view-controller path="handler/testMvcViewController" view-name="success" />
    <!--是SpringMVC的基础配置  很多功能需要通过该注解来协调-->
    <mvc:annotation-driven></mvc:annotation-driven>
    <!--让SpringMVC 接受一个请求时 没有对应的@Requestmapping(Servlet) 会自动使用默认的Servlet-->
    <mvc:default-servlet-handler></mvc:default-servlet-handler>


<!--这是前端数据的类型转换器   Mybatis有后端数据库的类型转换器-->
    <!--1.将自定义的类型转换器 放到IOC容器中-->
    <bean id="Converter" class="MyConverter" />

    <!--2.将Converter再纳入SpringMVC提供的转换器Bean中
    <bean id="ConversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <ref bean="Converter" />
            </set>
        </property>
    </bean>
-->

    <!--该bean既可以实现格式化  也可以实现类型转换-->
    <bean class="org.springframework.format.support.FormattingConversionServiceFactoryBean" id="ConversionService">
        <property name="converters">
            <set>
                <ref bean="Converter" />
            </set>
        </property>
    </bean>
    <!--3.将ConversionService注册到annotation-driven中    注解驱动-->
    <mvc:annotation-driven conversion-service="ConversionService"></mvc:annotation-driven>

    <!--配置org.springframework.web.multipart.commons.CommonsMultipartResolver 用于实现文件上传 将其加入SpringIOC容器
    d="multipartResolver"为固定写法 不能改变 初始化时自动寻找该Bean
    -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8" />
        <property name="maxUploadSize" value="104857600" />
    </bean>

    <!-- 将拦截器配置到IOC容器  默认拦截全部请求
 <mvc:interceptors>
     <bean class="interceptor.MyInterceptor" />
 </mvc:interceptors>-->

    <!--如果用指定路径 拦截器要到里面配置      -->
    <mvc:interceptors>

               <mvc:interceptor>
        <!--  指定拦截路径 基于ant风格-->
        <mvc:mapping path="/**"/>
        <!-- 指定不拦截路径-->
         <mvc:exclude-mapping path="/handler/testUpload"/>
         <bean class="interceptor.MyInterceptor" />

     </mvc:interceptor>

         <!--拦截链  第二个拦截器-->
        <mvc:interceptor>
            <!--指定拦截路径 基于ant风格-->
            <mvc:mapping path="/**"/>
            <!--指定不拦截路径-->
            <mvc:exclude-mapping path="/handler/testUpload"/>
            <bean class="interceptor.MyInterceptor2" />
        </mvc:interceptor>
    </mvc:interceptors>


    <!--SimpleMappingExceptionResolver:通过配置的方式处理异常-->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionAttribute" value="ex" /><!--相当于Exception ex 并将ex放到request域中-->
        <property name="exceptionMappings">
            <props>
                <!--相当于catch()-->
                <prop key="java.lang.Exception">
                    error
                </prop>
            </props>
        </property>
    </bean>
</beans>